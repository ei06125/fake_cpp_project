name: Build fake_cpp_project

on:
  push:
    branches: [ "dev" ] # Trigger on push to dev (we don't allow push to main)
  pull_request:
    branches: [ "main", "dev" ] # Trigger on PRs to main or dev

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GENERATOR: Ninja

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: [self-hosted, macOS, ARM64]

    steps:
    - uses: actions/checkout@v4

    - name: Check System Requirements
      run: |
        if command -v docker >/dev/null 2>&1; then
          echo "Docker found"
        else
          echo "Docker NOT FOUND! Exiting..."
          exit 1
        fi

    - name: Setup
      run: |
        docker run --name fake_cpp_project-container-${{ github.run_id }} --detach -i -t -v .:/project alpine /bin/sh

    - name: Configure
      run: |
        docker exec fake_cpp_project-container-${{ github.run_id }} sh -c "apk update && apk add \
          clang \
          lld \
          ninja \
          ccache \
          cmake \
          build-base \
          python3 \
          git \
          zlib-dev"

    - name: Generate
      run: |
        docker exec -w /project fake_cpp_project-container-${{ github.run_id }} sh -c "cmake -S . -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G ${{ env.GENERATOR }}"

    - name: Build
      run: |
        docker exec -w /project fake_cpp_project-container-${{ github.run_id }} sh -c "cmake --build build --config ${{env.BUILD_TYPE}}"

  tests:
    runs-on: [self-hosted, macOS, ARM64]
    needs: build
    steps:
    - name: Request Tests from test_fake_cpp_project
      run: |
        echo "Requesting testing of fake_cpp_project ..."
        set -e
        TARGET_REPO="ei06125/test_fake_cpp_project"
        WORKFLOW_ID="test.yaml"
        GITHUB_TOKEN="${{ secrets.PERSONAL_ACCESS_TOKEN }}"
        API_URL="https://api.github.com/repos/$TARGET_REPO/actions/workflows/$WORKFLOW_ID/dispatches"
        # Trigger the workflow (customize ref and inputs as needed)
        curl -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          $API_URL \
          --data '{"ref":"main", "inputs":{"gitBranch":"${{ github.event.pull_request.head.ref }}", "container_id":"${{ github.run_id }}"}}'

    - name: Wait for test_fake_cpp_project workflow to finish
      run: |
        set -e

        echo "Waiting for workflow run to complete..."

        REPO="ei06125/test_fake_cpp_project"
        WORKFLOW_ID="test.yaml"
        BRANCH="main"
        TOKEN="${{ secrets.PERSONAL_ACCESS_TOKEN }}"

        # Get latest workflow run for the given workflow + branch
        get_latest_run_id() {
          curl -s -H "Accept: application/vnd.github+json" \
               -H "Authorization: Bearer $TOKEN" \
               "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?branch=$BRANCH&event=workflow_dispatch&per_page=1" |
            jq -r '.workflow_runs[0].id'
        }

        wait_for_completion() {
          local run_id="$1"
          local conclusion=""

          for i in {1..30}; do
            sleep 10

            response=$(curl -s -H "Accept: application/vnd.github+json" \
                            -H "Authorization: Bearer $TOKEN" \
                            "https://api.github.com/repos/$REPO/actions/runs/$run_id")

            status=$(echo "$response" | jq -r '.status')
            conclusion=$(echo "$response" | jq -r '.conclusion')

            echo "Status: $status"

            if [[ "$status" == "completed" ]]; then
              echo "Workflow finished with conclusion: $conclusion"
              break
            fi
          done

          if [[ "$status" != "completed" ]]; then
            echo "::error ::Timeout waiting for workflow run to complete"
            exit 1
          fi

          if [[ "$conclusion" != "success" ]]; then
            echo "::error ::Workflow failed or timed out"
            exit 1
          fi
        }

        run_id=$(get_latest_run_id)
        if [ "$run_id" == "null" ]; then
          echo "::error ::Unable to find a workflow run for $WORKFLOW_ID on branch $BRANCH"
          exit 1
        fi

        echo "Found workflow run ID: $run_id"
        wait_for_completion "$run_id"

    - name: Deploy Checkpoint
      run: |
        echo "âœ… Tests completed successfully. Proceeding to deploy."

  deploy:
    runs-on: [self-hosted, macOS, ARM64]
    needs:
      - build
      - tests

    steps:
    - name: Install
      run: |
        docker exec -w /project fake_cpp_project-container-${{ github.run_id  }} sh -c "cmake --install build --prefix install"

    - name: Package
      run: |
        docker exec -w /project fake_cpp_project-container-${{ github.run_id  }} sh -c "cmake --build build --target run_cmake_pack"

    - name: Debug
      run: |
        echo "===> pwd"
        pwd
        echo "===> ls"
        ls
        echo "===> ls packages"
        ls packages

    - name: Deploy
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "experimental"
        files: |
          packages/fake_cpp_project*
        draft: true
        prerelease: true
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Teardown
      run:
        docker container stop fake_cpp_project-container-${{ github.run_id  }}
        docker container rm fake_cpp_project-container-${{ github.run_id  }}
