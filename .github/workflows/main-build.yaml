name: Main-Build
run-name: Build, Test and Deploy fake_cpp_project

on:
  workflow_dispatch:
  push:
    branches: [ "dev" ] # Trigger on push to dev (we don't allow push to main)
  pull_request:
    branches: [ "main", "dev" ] # Trigger on PRs to main or dev

env:
  BUILD_TYPE: Release
  GENERATOR: Ninja

jobs:
  build:
    runs-on: [self-hosted, macOS, ARM64]

    steps:
    - uses: actions/checkout@v4

    - name: Check System Requirements
      run: |
        echo "Checking System Requirements"

    - name: Setup
      run: |
        docker run --name fake_cpp_project-container-${{ github.run_id }} --detach -i -t -v .:/project alpine /bin/sh

    - name: Configure
      run: |
        docker exec fake_cpp_project-container-${{ github.run_id }} sh -c "apk update && apk add \
          clang \
          lld \
          ninja \
          ccache \
          cmake \
          build-base \
          python3 \
          git \
          zlib-dev"

    - name: Generate
      run: |
        docker exec -w /project fake_cpp_project-container-${{ github.run_id }} sh -c "cmake -S . -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G ${{ env.GENERATOR }}"

    - name: Build
      run: |
        docker exec -w /project fake_cpp_project-container-${{ github.run_id }} sh -c "cmake --build build --config ${{env.BUILD_TYPE}}"

  request-tests:
    needs: build 
    permissions:
      contents: read
      pull-requests: write
    uses: ei06125/test_fake_cpp_project/.github/workflows/test.yaml@main    
    with:
      gitBranch: ${{ github.head_ref }}
      container_id: ${{ github.run_id }}

  on-tests-completed:
    runs-on: [self-hosted, macOS, ARM64]
    needs:
      - build
      - request-tests
    
    steps:
      - id: on-tests-completed-eval
        run: |
          if [ ${{ needs.request-tests.outputs.test_result }} ]; then
            echo "Tests succeeded"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi
  
  deploy:
    runs-on: [self-hosted, macOS, ARM64]
    needs:
      - build
      - request-tests
      - on-tests-completed

    steps:
    - name: Install
      run: |
        docker exec -w /project fake_cpp_project-container-${{ github.run_id  }} sh -c "cmake --install build --prefix install"

    - name: Package
      run: |
        docker exec -w /project fake_cpp_project-container-${{ github.run_id  }} sh -c "cmake --build build --target run_cmake_pack"

    - name: Deploy
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "experimental"
        files: |
          packages/fake_cpp_project*
        draft: true
        prerelease: true
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  teardown:
    runs-on: [self-hosted, macOS, ARM64]
    if: always()
    needs:
      - build
      - request-tests
      - on-tests-completed
      - deploy
    steps:
    - name: Teardown
      run: |
        docker container stop fake_cpp_project-container-${{ github.run_id  }} || echo "Container already stopped"
        docker container rm fake_cpp_project-container-${{ github.run_id  }} || echo "Container already removed"
